#! /usr/bin/env python
"""Tool to add patches to central patch registry."""
from __future__ import print_function
import argparse
import json
import os
import subprocess
import sys
import urllib2


DEFAULT_PATCH_ROOT = (
    "https://raw.githubusercontent.com/"
    "cloudify-cosmo/patchify/master/patch_files/"
)


def get_central_registry_path():
    """Get the root central registry path."""
    return os.path.join(
        os.path.split(os.path.abspath(sys.argv[0]))[0],
        'central_registry',
    )


def get_patch_details(patch_definition_path):
    """Get details of the patch that is to be added to the registry."""
    if not os.path.exists(patch_definition_path):
        sys.stderr.write(
            'Cannot load patch definition from {path} as it does not '
            'exist.\n'
            'FAILED TO ADD PATCH TO CENTRAL REGISTRY.\n'.format(
                path=patch_definition_path,
            )
        )
        sys.exit(1)

    definition_hash = subprocess.check_output(
        ['./pysha256sum', patch_definition_path]
    ).split()[0]
    patch_definition_file = os.path.split(patch_definition_path)[1]
    patch_name = os.path.splitext(patch_definition_file)[0]

    with open(patch_definition_path) as patch_def_handle:
        patch_definition = json.load(patch_def_handle)

    if not patch_definition['patch_version'].startswith('2.'):
        sys.stderr.write(
            'Patches to be added to the central registry must be at least '
            'version 2.0.0.\n'
            'FAILED TO ADD PATCH TO CENTRAL REGISTRY.\n'
        )
        sys.exit(1)

    patch_description = patch_definition['description']
    patch_files = [
        patch['patch_file'] for patch in patch_definition['patches']
    ]
    patch_id = generate_patch_id(patch_name, definition_hash)

    applicable_versions = patch_definition['manager_versions']

    patch_details = {
        "patch_name": patch_name,
        "patch_id": patch_id,
        "patch_hash": definition_hash,
        "patch_description": patch_description,
        "patch_definition_path": patch_definition_file,
        "patch_files": patch_files,
        "supports_community": patch_definition['community'],
    }

    return applicable_versions, patch_details


def generate_patch_id(patch_name, definition_hash):
    """Generate the ID of a patch. This method should match that used in the
    main patchify script."""
    return patch_name + '-' + definition_hash


def get_central_registry(version):
    """Get the central registry for a version. If this doesn't exist, return
    the default base central registry."""
    version_registry_path = os.path.join(
        get_central_registry_path(), version + '.json'
    )

    if os.path.exists(version_registry_path):
        with open(version_registry_path) as reg_handle:
            return json.load(reg_handle)
    else:
        # Return the default starting repo
        return {
            "patch_root_path": DEFAULT_PATCH_ROOT,
            "patches": [],
        }


def check_patch_details(patch_details, registry):
    """Confirm patch is valid for adding to registry."""
    # Check the patch isn't already in the registry
    ids_in_registry = [
        patch['patch_id'] for patch in registry['patches']
    ]
    if patch_details['patch_id'] in ids_in_registry:
        sys.stderr.write(
            'Patch {patch_id} is already in the central registry.\n'
            'ABORTING ADDING PATCH!\n'.format(
                patch_id=patch['patch_id'],
            )
        )
        sys.exit(1)

    # Check that all files the patch requires are reachable
    root = registry['patch_root_path']

    # We'll only expect to handle:
    #  - http(s)://
    #  - file:// paths (for dev work)
    root_components = root.split('://', 1)
    proto = root_components[0]
    if len(root_components) != 2 or proto not in ('http', 'https', 'file'):
        sys.stderr.write(
            'Expecting patch root path to be file:// or http(s)://\n'
            'ABORTING ADDING PATCH!\n'
        )
        sys.exit(1)

    files_to_check = [
        root + '/patches/' + patch_file
        for patch_file in patch_details['patch_files']
    ]
    files_to_check.append(
        root + '/' + patch_details['patch_definition_path']
    )

    for file_to_check in files_to_check:
        result = urllib2.urlopen(file_to_check)
        if proto in ('http', 'https'):
            success = result.code == 200
        else:
            success = result.code is None

        if not success:
            sys.stderr.write(
                'Failed to access {target_file}.\n'
                'Response code was: {code}\n'
                'Message was: {msg}\n'
                'ABORTING ADDING PATCH!\n'.format(
                    target_file=file_to_check,
                    code=str(result.code),
                    msg=result.msg,
                )
            )
            sys.exit(1)


def update_central_registry(registry, version):
    """Update the central registry for the specified version."""
    version_registry_path = os.path.join(
        get_central_registry_path(), version + '.json'
    )

    with open(version_registry_path, 'w') as reg_handle:
        reg_handle.write(json.dumps(registry, indent=2))


def main():
    """Get arguments, generate, and test the patch."""
    parser = argparse.ArgumentParser(
        description=(
            'Add a patch to the list of patches recommended for deployment '
            'on all managers of a specific version.'
        ),
    )
    parser.add_argument(
        '-p', '--patch-definition-path',
        help='Path to patch definition file to add.',
        required=True,
    )

    args = parser.parse_args()

    manager_versions, patch_details = get_patch_details(
        args.patch_definition_path,
    )

    for version in manager_versions:
        central_registry = get_central_registry(version)

        check_patch_details(patch_details, central_registry)
        central_registry['patches'].append(patch_details)

        update_central_registry(central_registry, version)

        print('Updated registry for version {ver}'.format(ver=version))

    print('Please confirm changes are expected before creating a PR.')
    print(
        'It is also recommended that you test applying all patches in '
        'modified registries to clean managers of those versions.'
    )


if __name__ == '__main__':
    main()
